import java.util.*;

/**
 * @author Riebeta Bokoko
 * Substitution Cipher (Caesar)
 * Version 2.0 now distinguish between Lower and Upper case
 */
public class substitutionCypher 
{
	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		ArrayList<String> lowerCase = new ArrayList<String>(Arrays.asList("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
		"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"));
		
		ArrayList<String> upperCase = new ArrayList<String>();
		for(int i = 0; i < lowerCase.size(); i++){upperCase.add(lowerCase.get(i).toUpperCase());}
		
		ArrayList<String> skipped = new ArrayList<String>(Arrays.asList(" ", ",", "'", ".", ";", "?", "!"));
		
		
		
		System.out.println("Enter the message you wish to encrypt: ");
		String message = in.nextLine();
		System.out.println("Enter the key you wish to encode your message with ");
		int key = in.nextInt();
		while (key > 25) // Restricts they key to be no higher than 25 as that is the number of letters in the alphabet
		{
			System.out.println("Your key cannot exceed the number of letters in the Alphabet... ");
			System.out.println("Enter the key you wish to encode your message with ");
			key = in.nextInt();
		}
		System.out.println();
		
		String encrypted = encode(lowerCase,upperCase,skipped,message,key);
		System.out.println(encrypted);
		
		System.out.println();
		
		String decrypted = decode(lowerCase,upperCase,skipped,encrypted,key);
		System.out.println(decrypted);
		
		in.close();
		
	}
	
	/**
	 * @param alphabet
	 * @param message
	 * @param key
	 * @return
	 * Encodes the message that the user enters 
	 */
	public static String encode(ArrayList<String> lc, ArrayList<String> uc, ArrayList<String> skipped, String message, int key)
	{
		int mLong = message.length();
		char letter;
		boolean jump = false;
		String letterAsStr;
		String encoded = "";
		for (int i = 0; i < mLong; i++)
		{
			jump = false;
			letter = message.charAt(i);
			if(Character.isUpperCase(letter))
			{
				letterAsStr = String.valueOf(letter);
				for (int z = 0; z < skipped.size(); z++)
				{
					if (letterAsStr.equals(skipped.get(z))){jump = true;}
				}
				if (jump == true){encoded += letterAsStr; continue;}
				else
				{
					for (int j = 0; j < uc.size(); j++)
					{
						if (letterAsStr.equals(uc.get(j)))
						{
							letterAsStr = uc.get(j+key);
							break;
						}
					}
				}
				encoded += letterAsStr;
			}
			else
			{
				letterAsStr = String.valueOf(letter);
				for (int z = 0; z < skipped.size(); z++)
				{
					if (letterAsStr.equals(skipped.get(z))){jump = true;}
				}
				if (jump == true){encoded += letterAsStr; continue;}
				else
				{
					for (int j = 0; j < lc.size(); j++)
					{
						if (letterAsStr.equals(lc.get(j)))
						{
							letterAsStr = lc.get(j+key);
							break;
						}
					}
				}
				encoded += letterAsStr;
			}
		}
		return encoded;
	}
	/**
	 * @param alphabet
	 * @param message
	 * @param key
	 * @return
	 * Decodes the message that the user has entered 
	 */
	public static String decode(ArrayList<String> lc, ArrayList<String> uc, ArrayList<String> skipped, String encoded, int key)
	{
		int mLong = encoded.length();
		char letter;
		boolean jump = false;
		String letterAsStr;
		String decoded = "";
		for (int i = 0; i < mLong; i++)
		{
			jump = false;
			letter = encoded.charAt(i);
			if(Character.isUpperCase(letter))
			{
				letterAsStr = String.valueOf(letter);
				for (int z = 0; z < skipped.size(); z++)
				{
					if (letterAsStr.equals(skipped.get(z))){jump = true;}
				}
				if (jump == true){decoded += letterAsStr; continue;}
				else
				{
					for (int j = 0; j < uc.size(); j++)
					{
						if (j - key < 0){j =+ 25;} // if the operation on the if statement is less than 0 then we sum up 25 to the actual value of j
						if (letterAsStr.equals(uc.get(j)))
						{
							letterAsStr = uc.get(j-key);
							break;
						}
					}
				}
				decoded += letterAsStr;
			}
			else
			{
				letterAsStr = String.valueOf(letter);
				for (int z = 0; z < skipped.size(); z++)
				{
					if (letterAsStr.equals(skipped.get(z))){jump = true;}
				}
				if (jump == true){decoded += letterAsStr; continue;}
				else
				{
					for (int j = 0; j < lc.size(); j++)
					{
						if (j - key < 0){j =+ 25;} // if the operation on the if statement is less than 0 then we sum up 25 to the actual value of j
						if (letterAsStr.equals(lc.get(j)))
						{
							letterAsStr = lc.get(j-key);
							break;
						}
					}
				}
				decoded += letterAsStr;
			}
		}
		return decoded;
	}

}
